(1,N)

    public function classrooms()
    {
        return $this->hasMany('App\Classroom');
    }

    public function building()
    {
        return $this->belongsTo('App\Building');
    }

(N,N)

    public function features()
    {
        return $this->belongsToMany('App\Feature', 'product_feature');
    }

// in Feature model
    public function products()
    {
        return $this->belongsToMany('App\Product', 'product_feature');
    }

(1,1)

    public function canceledLesson()
    {
        return $this->hasOne('App\CanceledLesson');
    }

    public function lesson()
    {
        return $this->belongsTo('App\Lesson');
    }
	
	
	
Next, you may register a resourceful route to the controller:

Route::resource('photos', 'PhotoController');

This single route declaration creates multiple routes to handle a variety of actions on the resource.


Nested Resources
Sometimes you may need to define routes to a nested resource. For example, a photo resource may have multiple comments that may be attached to the photo. 
To nest the resource controllers, use "dot" notation in your route declaration:

Route::resource('photos.comments', 'PhotoCommentController');

This route will register a nested resource that may be accessed with URIs like the following:

/photos/{photo}/comments/{comment}

Shallow Nesting
Often, it is not entirely necessary to have both the parent and the child IDs within a URI since the child ID is already a unique identifier. 
When using unique identifier such as auto-incrementing primary keys to identify your models in URI segments, you may choose to use "shallow nesting":

Route::resource('photos.comments', 'CommentController')->shallow();

If your application is exclusively using controller based routes, you should take advantage of Laravel's route cache. Using the route cache will drastically decrease 
the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster.
To generate a route cache, just execute the route:cache Artisan command:

php artisan route:cache

CHIAVE DI CRIPTAZIONE:

.env :
1 APP_NAME=Laravel
2 APP_ENV=local
3 APP_KEY=base64:kqMUM6VPWlTFv32wUVfbIQNWtL+azzwYxwvogLBawzk= // ecco la chiave
4 APP_DEBUG=true

config/app.php

112    /*
113    |--------------------------------------------------------------------------
114    | Encryption Key
115    |--------------------------------------------------------------------------
116    |
117    | This key is used by the Illuminate encrypter service and should be set         
118    | to a random, 32 character string, otherwise these encrypted strings
119    | will not be safe. Please do this before deploying an application!
120    |
121    */
122
123    'key' => env('APP_KEY'),
124
125    'cipher' => 'AES-256-CBC',

inserimento :  'secret' => encrypt($request->secret);
estrazione : $decrypted = decrypt($encryptedValue);



public function __construct()
    {
        $rules = array(
            ffffffffffffff
        );
    }


        $error = Validator::make($request->all(), $rules);
        if($error->fails()){ return response()->json(['errors' => $error->errors()->all()]); }

        $address = new Address();
        $address->fill( $request->all() );
        $address->save();

        return response()->json(['success' => 'success!']);

----------------------------------------------------------------------------------------------------

        $error = Validator::make($request->all(), $rules);

        if($error->fails()){
            return response()->json(['errors' => $error->errors()->all()]);
        }
        $address = Address::find($id);
        $address->fill( $request->all() );
        $address->save();


























